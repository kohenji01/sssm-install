<?php
/**
 * =============================================================================================
 *  Project: sssm
 *  File: Install.php
 *  Date: 2020/05/20 14:18
 *  Author: Shoji Ogura <kohenji@sarahsytems.com>
 *  Copyright (c) 2020. SarahSystems lpc.
 *  This software is released under the MIT License, see LICENSE.txt.
 * =============================================================================================
 */
/** @noinspection PhpUnused */
/** @noinspection PhpUndefinedClassInspection */
namespace Sssm\Install\Controllers;

use CodeIgniter\Config\Config;
use CodeIgniter\Config\DotEnv;
use CodeIgniter\Files\Exceptions\FileNotFoundException;
use CodeIgniter\HTTP\RequestInterface;
use CodeIgniter\HTTP\ResponseInterface;
use Config\Services;
use Exception;
use Modules\SarahSystems\Example\Models\Installer;
use Psr\Log\LoggerInterface;
use Sssm\Base\Config\SssmBase;
use Sssm\Base\Controllers\UserBaseController;
use Sssm\Install\Models\DBInit;
use Sssm\Install\Models\SystemInit;
use Sssm\ModuleInstaller\Models\ModulesInfo;
use function Sssm\Helpers\smarty_body_path;

/**
 * Class Install
 * @package Sssm\Install\Controllers
 */
class Install extends UserBaseController{
    
    public $data=[];
    public $moduleNameSpace = '';
    public $moduleFilePathBaseh = '';
    
    public function initController( RequestInterface $request , ResponseInterface $response , LoggerInterface $logger ){
        parent::initController( $request , $response , $logger ); // TODO: Change the autogenerated stub
        
        if( file_exists( WRITEPATH . 'sssm_was_installed' ) ){
            die( 'sssm installer is already executed. If you want to run installer again, You should erase ' . WRITEPATH . 'sssm_was_installed file and reload this page.' );
        }
    
        $site_url = site_url();
        if( substr( $site_url , -1 ) == '/' ){
            $site_url = substr( $site_url , 0 , -1 );
        }
        $this->data['site_url'] = $site_url;
        $this->sssm->smartyBodyPath = smarty_body_path(__FILE__);
    }
    
    public function index(){
        
        $this->smarty->assign( 'DATA' , $this->data );
        
        return $this->view( __METHOD__ );
    }
    
    public function set_env_file( $save = '' ){
        $install = null;
        try{
            $install = new SystemInit();
            
            if( $save == 'save' ){
                $install->saveEnvFile();
                $env = new DotEnv( ROOTPATH );
                $env->load();
                $install->runCheckEnv();
                return redirect()->to( $_ENV['app.baseURL'] . $_ENV['app.indexPage'] . '/Install/check_writable' );
            }
    
            $install->runCheckEnv();
            
            
        }catch( Exception $e ){
            if( !empty( $install ) ){
                $install->catchedException = $e->getMessage() . " : " . $e->getFile() . " : " . $e->getLine();
            }
        }
        
        $this->smarty->assign( 'DATA' , $install );
        return $this->view( __METHOD__ );
    }
    
    public function check_writable(){
        $install = null;
        try{
            $install = new SystemInit();
            $install->runCheckWritable();
        }catch( Exception $e ){
            if( !empty( $install ) ){
                $install->catchedException = $e->getMessage() . " : " . $e->getFile() . " : " . $e->getLine();
            }
        }
        $this->smarty->assign( 'DATA' , $install );
        return $this->view( __METHOD__ );
        
    }
    
    public function set_db_info( $save = '' ){
        $install = null;
        try{
            $install = new DBInit();
            
            if( $save == 'save' ){
                $install->saveDbInfo();
                $env = new DotEnv( ROOTPATH );
                $env->load();
                $install->createTables();
                $install->saveSessionInfo();
                $env = new DotEnv( ROOTPATH );
                $env->load();
                return redirect()->to( $_ENV['app.baseURL'] . $_ENV['app.indexPage'] . '/Install/modules' );
            }
            
        }catch( Exception $e ){
            if( !empty( $install ) ){
                $install->catchedException = $e->getMessage() . " : " . $e->getFile() . " : " . $e->getLine();
            }
        }
        
        $this->smarty->assign( 'DATA' , $install );
        return $this->view( __METHOD__ );
    }
    
    public function modules( $exec = '' ){
        $_SESSION[$_ENV['sssm.sysname']]['User']['Role'] = SssmBase::systemRole_ROOT;
    
        $modules = new ModulesInfo() ;
        $modules_list = $modules->getInfo();
        $request = Services::request();
        if( ( $exec === 'exec' || $exec === 'remove' ) && $request->getVar('t') != '' ){
            $this->_autoload();
            if( !isset( $modules_list[$request->getVar('t')] ) ){
                throw new FileNotFoundException();
            }
            $this->moduleNameSpace = $modules_list[$request->getVar('t')]['namespace'];
            $this->moduleFilePathBase = $request->getVar('t');
            $install = new Installer();
            
            switch( $exec ){
                case 'exec':
                    $install->install();
                    break;
                case 'remove':
                    $install->uninstall();
                    break;
            }
        }
        $this->smarty->assign( 'modules' , $modules_list );
        return $this->view( __METHOD__ );
    }
    
    private function _autoload(){
        spl_autoload_register(
            function( $class ){
                // プロジェクト固有の名前空間接頭辞
                $prefix = $this->moduleNameSpace;

                
                // 名前空間接頭辞のベースディレクトリ
                $base_dir = $this->moduleFilePathBase . 'src';
                
                // クラスは名前空間接頭辞を使用しますか？
                $len = strlen( $prefix );
                if( strncmp( $prefix , $class , $len ) !== 0 ){
                    // いいえ、次に登録されたオートローダーに移動します。
                    return;
                }
                
                // 相対クラス名を取得する
                $relative_class = substr( $class , $len );
                
                
                // 名前空間接頭辞をベースディレクトリに置き換え、
                // 名前空間区切り文字を相対クラス名のディレクトリ区切り文字で置き換え、
                //.phpで追加します
                $file = $base_dir . str_replace( '\\' , '/' , $relative_class ) . '.php';
                
                // ファイルが存在する場合は読み込む
                if( file_exists( $file ) ){
                    require $file;
                }
            }
        );
    }


}